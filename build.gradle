buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails:grails-docs:${project.ext.properties.grailsDocsVersion ?: grailsVersion}"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath "org.grails.plugins:views-gradle:$jsonViewsVersion"
    }
}

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}   

version project.projectVersion

ext {
     commonBuild = 'https://raw.githubusercontent.com/grails/grails-common-build/v2.0.0.M1'
}

subprojects {

    version project.projectVersion

    ext {
        userOrg = "grails"
        isGrailsPlugin = name.startsWith('grails-plugin')
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
    }

    if(isGrailsPlugin) {
        group "org.grails.plugins"
    }
    else {
        group "org.grails"
    }

    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        if(groovyVersion && groovyVersion.endsWith('-SNAPSHOT')) {
            maven {
                name 'JFrog OSS snapshot repo'
                url 'https://oss.jfrog.org/oss-snapshot-local/'
            }
        }
    }

    apply plugin: "groovy"
    if(it.name.startsWith("demo")) {
        apply plugin:"org.grails.grails-web"
        apply plugin:"org.grails.plugins.views-json"
    }
    else {
        apply plugin: "java-library"
        if(isGrailsPlugin) {
            apply plugin:"org.grails.grails-plugin"
            apply from:"${commonBuild}/common-publishing.gradle"
        } else {
            apply from:"${commonBuild}/common-project.gradle"
            apply from:"${commonBuild}/common-publishing.gradle"
        }

        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    configurations.all { Configuration configuration ->
        configuration.resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if(details.requested.group == 'org.spockframework') {
                details.useVersion(spockVersion)
            }
        }
    }

    dependencies {
        implementation "com.github.javaparser:javaparser-core:$javaParserVersion"
        compileOnly "javax.servlet:javax.servlet-api:$servletApiVersion"

        testImplementation "javax.servlet:javax.servlet-api:$servletApiVersion"
        testImplementation "org.codehaus.groovy:groovy-test-junit5:$groovyVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.0"
        testImplementation "org.junit.platform:junit-platform-runner:1.6.0"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.0"
    }

    test {
        useJUnitPlatform()
    }
}

apply from:"${commonBuild}/common-docs.gradle"
