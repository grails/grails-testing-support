configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if(details.requested.group == 'org.springframework') {
            details.useVersion(springVersion)
        }
        else if(details.requested.group == 'org.springframework.boot') {
            details.useVersion(springBootVersion)
        }
    }
}

dependencies {
    api "org.springframework:spring-test:$springVersion"
    api("org.grails:grails-plugin-codecs:$grailsVersion") {
        exclude module: 'grails-plugin-mimetypes'
        exclude module: 'grails-plugin-converters'
        exclude module: 'grails-web'
    }
    api("org.grails.plugins:async:$asyncVersion") {
        exclude module: 'grails-plugin-controllers'
        exclude module: 'grails-core'
    }
    api "org.grails:grails-datastore-gorm:$gormVersion"
    api("org.grails:grails-test:$grailsVersion")
    api "org.springframework.boot:spring-boot-test:${springBootVersion}"
    api("org.spockframework:spock-spring:${spockVersion}") { transitive = false }
    api("org.spockframework:spock-core:${spockVersion}") { transitive = false }
    api "org.codehaus.groovy:groovy-test-junit5:$groovyVersion"
    api "org.junit.jupiter:junit-jupiter-api:5.9.3"
    api "org.junit.platform:junit-platform-runner:1.9.3"
    runtimeOnly "org.junit.jupiter:junit-jupiter-engine:5.9.3"
}

